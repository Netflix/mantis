/*
 * Copyright 2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: 'com.palantir.git-version'

dependencies {
    api project(":mantis-runtime-loader")
    api project(":mantis-server:mantis-server-worker-client")

    implementation libraries.vavr
    implementation libraries.zip4j
    implementation libraries.commonsIo
    // We only need the org.apache.hadoop.fs.FileSystem interface. Users can bring their own hadoop-common version.
    implementation libraries.hadoopCommon
    implementation libraries.spotifyFutures
    implementation libraries.slf4jApi
    implementation libraries.slf4jLog4j12
    implementation libraries.spectatorApi
    implementation "io.github.resilience4j:resilience4j-retry:1.5.0"

    testImplementation libraries.junit4
    testImplementation libraries.mockitoAll
    testImplementation project(":mantis-runtime-executor")
    testImplementation(testFixtures(project(":mantis-control-plane:mantis-control-plane-core")))
}

def mantisExamplesSineFunction = project(":mantis-examples:mantis-examples-sine-function")
def mantisExamplesSineFunctionBuildDir = mantisExamplesSineFunction.buildDir
def mantisExamplesSineFunctionMantisZipArtifact = mantisExamplesSineFunction.getTasksByName("mantisZipArtifact", false)
def pushServerJob = project(":mantis-source-jobs:mantis-source-job-publish")

def installDir = file("${buildDir}/install")
def resourcesDir = file("${buildDir}/resources")
def ci = System.getenv('GITHUB_ACTIONS')
def imageRepository = ci ? 'netflixoss' : 'localhost:5001/netflixoss'
def gitVersionTag = gitVersion()

docker {
    dockerSyncBuildContext {
        from installDir
        from resourcesDir
        // get push server job's distribution zip into the docker build context
        into("examples") {
            from new File(pushServerJob.buildDir, "distributions")
            from new File(mantisExamplesSineFunctionBuildDir, "distributions")
        }
    }

    dockerCreateDockerfile {
        instruction 'RUN apt-get update && apt-get install -y curl'
        // root directory to store all the files
        instruction 'WORKDIR /apps/mantis/mantis-server-agent'
        // copy the files from the build context to the image
        instruction 'COPY mantis-server-agent/bin/* /apps/mantis/mantis-server-agent/bin/'
        instruction 'COPY mantis-server-agent/lib/* /apps/mantis/mantis-server-agent/lib/'
        instruction 'COPY examples/* mantis-artifacts/storage/'
        instruction 'COPY resources/* conf/'
        entryPoint 'bin/mantis-server-agent', '-p', 'conf/agent-docker.properties'
    }

    javaApplication {
        baseImage = 'azul/zulu-openjdk:17-latest'
        maintainer = 'Mantis Developers "mantis-oss-dev@netflix.com"'
        mainClassName = 'io.mantisrx.server.agent.AgentV2Main'
        applicationDefaultJvmArgs = ['--add-opens', 'java.base/java.lang=ALL-UNNAMED', '--add-opens', 'java.base/sun.net.util=ALL-UNNAMED']
        images = ["$imageRepository/mantisagent:latest", "$imageRepository/mantisagent:$gitVersionTag"]
        ports = [5050]
    }
}

dockerSyncBuildContext.dependsOn(pushServerJob.getTasksByName("mantisZipArtifact", false))
dockerSyncBuildContext.dependsOn(mantisExamplesSineFunctionMantisZipArtifact)
dockerSyncBuildContext.dependsOn(installDist)

mainClassName = "io.mantisrx.server.agent.AgentV2Main"
