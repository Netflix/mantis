/*
 * Copyright 2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:10.6.0'
        classpath 'com.netflix.nebula:nebula-dependency-recommender:11.+'
        classpath 'io.mantisrx:mantis-gradle-plugin:1.2.+'
        classpath "io.freefair.gradle:lombok-plugin:5.3.3.3"
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.3.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:4.0.0'
    }
}

ext.versions = [
        akkaHttpVersion : '10.2.7',
        akkaVersion : '2.6.15',
        archaiusVersion: "latest.release",
        avroVersion : "1.10.2",
        cliParserVersion : '1.1.1',
        configMagicVersion : '0.11',
        curatorVersion : '2.12.+',
        fenzoVersion : '0.13.8',
        flink    : "1.14.2",
        gsonVersion : "2.8.+",
        guavaFailureAccessVersion : '1.0.1',
        guavaVersion : '31.1-jre',
        guiceVersion : "4.2.2",
        guiceServletVersion : '4.0',
        hadoop   : "2.7.7",
        hdrHistogramVersion : '2.+',
        httpComponentsVersion : '4.5.6',
        icebergVersion : "0.14.+",
        jacksonVersion : '2.12.+',
        jctoolsVersion : "1.+",
        jlineVersion : '0.9.94',
        jodaTimeVersion : '2.+',
        jsonVersion : '20180813',
        junit4   : "4.11",
        junit5   : "5.4.+",
        kafkaVersion : "2.2.+",
        mantisConnectorsVersion : '1.2.5',
        mantisRxControlVersion : '1.3.+',
        mesosVersion : '1.7.2',
        mockito  : "2.18.+",
        mockito1 : "1.9.5",
        mockito3 : "3.+",
        mockNeatVersion : '0.4.8',
        mqlVersion : '3.4.+',
        nettyVersion3 : '3.7.0.Final',
        nettyVersion : "4.1.34.Final",
        parquetVersion : "1.12.0",
        rxJavaMathVersion : "0.20.6",
        rxJavaReactiveStreamsVersion : '1.+',
        scalaBinaryVersion : '2.12',
        snappyVersion : "1.1.+",
        spectator: "latest.release",
        slf4j    : "1.7.0",
        testngVersion : '6.14.+',
        vavr     : "0.9.2",
        zookeeperVersion : '3.4.+',
]

ext.libraries = [
        akkaActor      : "com.typesafe.akka:akka-actor_${versions.scalaBinaryVersion}:${versions.akkaVersion}",
        akkaHttp       : [
            "com.typesafe.akka:akka-http_${versions.scalaBinaryVersion}:${versions.akkaHttpVersion}",
            "com.typesafe.akka:akka-http-caching_${versions.scalaBinaryVersion}:${versions.akkaHttpVersion}",
            "com.typesafe.akka:akka-http-jackson_${versions.scalaBinaryVersion}:${versions.akkaHttpVersion}",
        ],
        akkaSlf4j      : "com.typesafe.akka:akka-slf4j_${versions.scalaBinaryVersion}:${versions.akkaVersion}",
        akkaStream     : "com.typesafe.akka:akka-stream_${versions.scalaBinaryVersion}:${versions.akkaVersion}",
        akkaTestkit    : "com.typesafe.akka:akka-testkit_${versions.scalaBinaryVersion}:${versions.akkaVersion}",
        akkaHttpTestkit: "com.typesafe.akka:akka-http-testkit_${versions.scalaBinaryVersion}:${versions.akkaHttpVersion}",
        archaius2Api   : "com.netflix.archaius:archaius2-api:${versions.archaiusVersion}",
        archaius2Core  : "com.netflix.archaius:archaius2-core:${versions.archaiusVersion}",
        archaius2Guice : "com.netflix.archaius:archaius2-guice:${versions.archaiusVersion}",
        asyncHttpClient: "org.asynchttpclient:async-http-client:2.12.3",
        avro           : "org.apache.avro:avro:${versions.avroVersion}",
        commonsIo      : "commons-io:commons-io:2.11.0",
        commonsLang3   : 'org.apache.commons:commons-lang3:3.5',
        configMagic    : "org.skife.config:config-magic:${versions.configMagicVersion}",
        cliParser      : "com.github.spullara.cli-parser:cli-parser:${versions.cliParserVersion}",
        curator        : [
            "org.apache.curator:curator-recipes:${versions.curatorVersion}",
            "org.apache.curator:curator-framework:${versions.curatorVersion}",
            "org.apache.curator:curator-client:${versions.curatorVersion}",
        ],
        failureaccess  : "com.google.guava:failureaccess:${versions.guavaFailureAccessVersion}",
        fenzoCore      : "com.netflix.fenzo:fenzo-core:${versions.fenzoVersion}",
        fenzoTriggers  : "com.netflix.fenzo:fenzo-triggers:${versions.fenzoVersion}",
        flinkCore      : "org.apache.flink:flink-core:${versions.flink}",
        flinkRpcApi    : [
                "org.apache.flink:flink-rpc-core:${versions.flink}",
        ],
        flinkRpcImpl   : [
                "org.apache.flink:flink-rpc-akka:${versions.flink}",
        ],
        junit4         : [
                "junit:junit:${versions.junit4}",
                "junit:junit-dep:${versions.junit4}",
        ],
        gson           : "com.google.code.gson:gson:${versions.gsonVersion}",
        guava          : "com.google.guava:guava:${versions.guavaVersion}",
        guice          : "com.google.inject:guice:${versions.guiceVersion}",
        guiceServlet   : "com.google.inject.extensions:guice-servlet:${versions.guiceServletVersion}",
        hadoopCommon   : "org.apache.hadoop:hadoop-common:${versions.hadoop}",
        hadoopS3       : "org.apache.hadoop:hadoop-aws:${versions.hadoop}",
        hamcrest       : "org.hamcrest:hamcrest-core:1.3",
        hamcrestAll    : "org.hamcrest:hamcrest-all:1.3",
        hdrHistogram   : "org.hdrhistogram:HdrHistogram:${versions.hdrHistogramVersion}",
        httpClient     : "org.apache.httpcomponents:httpclient:${versions.httpComponentsVersion}",
        iceberg        : [
            "org.apache.iceberg:iceberg-api:${versions.icebergVersion}",
            "org.apache.iceberg:iceberg-core:${versions.icebergVersion}",
            "org.apache.iceberg:iceberg-data:${versions.icebergVersion}",
            "org.apache.iceberg:iceberg-parquet:${versions.icebergVersion}", 
        ],
        jackson        : [
            "com.fasterxml.jackson.core:jackson-annotations:${versions.jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-core:${versions.jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${versions.jacksonVersion}",
            "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${versions.jacksonVersion}",
        ],
        jacksonDatatypeJsr310 : "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jacksonVersion}",
        jacksonModuleAfterburner : "com.fasterxml.jackson.module:jackson-module-afterburner:${versions.jacksonVersion}",
        jacksonDataformatCbor :  "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:${versions.jacksonVersion}",
        javaxServletApi: "javax.servlet:javax.servlet-api:3.1.0",
        jcip           : "net.jcip:jcip-annotations:1.0",
        jctools        : "org.jctools:jctools-core:${versions.jctoolsVersion}",
        jline          : "jline:jline:${versions.jlineVersion}",
        jodaTime       : "joda-time:joda-time:${versions.jodaTimeVersion}",
        json           : "org.json:json:${versions.jsonVersion}",
        junitJupiter   : [
                "org.junit.jupiter:junit-jupiter-api:${versions.junit5}",
                "org.junit.jupiter:junit-jupiter-engine:${versions.junit5}",
                "org.junit.jupiter:junit-jupiter-params:${versions.junit5}",
        ],
        kafkaClients   : "org.apache.kafka:kafka-clients:${versions.kafkaVersion}",
        mantisConnectorJob : "io.mantisrx:mantis-connector-job:${versions.mantisConnectorsVersion}",
        mantisShaded   : "io.mantisrx:mantis-shaded:2.0.2",
        mantisRxControl: "io.mantisrx:mantis-rxcontrol:${versions.mantisRxControlVersion}",
        mesos          : "org.apache.mesos:mesos:${versions.mesosVersion}",
        moa            : "nz.ac.waikato.cms.moa:moa:2017.06",
        mockitoAll     : "org.mockito:mockito-all:${versions.mockito}",
        mockitoAll1    : "org.mockito:mockito-all:${versions.mockito1}",
        mockitoCore    : "org.mockito:mockito-core:${versions.mockito}",
        mockitoCore3   : "org.mockito:mockito-core:${versions.mockito3}",
        mockneat       : "net.andreinc:mockneat:${versions.mockneatVersion}",
        mqlJvm         : "io.mantisrx:mql-jvm:${versions.mqlVersion}",
        netty          : "io.netty:netty:${versions.nettyVersion}",
        nettyAll       : "io.netty:netty-all:${versions.nettyVersion}",
        nettyBuffer    : "io.netty:netty-buffer:${versions.nettyVersion}",
        nettyCodec     : "io.netty:netty-codec-http:${versions.nettyVersion}",
        nettyEpoll     : "io.netty:netty-transport-native-epoll:${versions.nettyVersion}:linux-x86_64",
        nettyHandler   : "io.netty:netty-handler:${versions.nettyVersion}",
        parquetHadoop  : "org.apache.parquet:parquet-hadoop:${versions.parquetVersion}",
        rxJava         : "io.reactivex:rxjava:1.3.8",
        rxJavaMath     : "com.netflix.rxjava:rxjava-math:${versions.rxJavaMathVersion}",
        rxJavaReactiveStreams : "io.reactivex:rxjava-reactive-streams:${versions.rxJavaReactiveStreamsVersion}",
        rxNettyShaded  : "com.netflix:mantis-rxnetty:0.4.19.1",
        sketchesCore   : "com.yahoo.datasketches:sketches-core:0.9.1",
        slf4jApi       : "org.slf4j:slf4j-api:${versions.slf4j}",
        slf4jLog4j12   : "org.slf4j:slf4j-log4j12:${versions.slf4j}",
        snappyJava     : "org.xerial.snappy:snappy-java:${versions.snappyVersion}",
        spectatorApi   : "com.netflix.spectator:spectator-api:${versions.spectator}",
        spectatorExtIpc: "com.netflix.spectator:spectator-ext-ipc:${versions.spectator}",
        spectatorApi0 : "com.netflix.spectator:spectator-api:0.134.0",
        spectatorExtIpc0: "com.netflix.spectator:spectator-ext-ipc:0.134.0",
        spectatorPlugin: "com.netflix.spectator:spectator-nflx-plugin:${versions.spectatorVersion}",
        spectatorPlugin0: "com.netflix.spectator:spectator-nflx-plugin:0.134.0",
        spotifyFutures : "com.spotify:completable-futures:0.3.1",
        testng         : "org.testng:testng:${versions.testngVersion}",
        vavr           : "io.vavr:vavr:${versions.vavr}",
        vavrJackson    : "io.vavr:vavr-jackson:${versions.vavr}",
        vavrTest       : "io.vavr:vavr-test:${versions.vavr}",
        wiremock       : "com.github.tomakehurst:wiremock-jre8:2.21.0",
        zip4j          : "net.lingala.zip4j:zip4j:2.9.0",
        zookeeper      : "org.apache.zookeeper:zookeeper:${versions.zookeeperVersion}"
]

allprojects {
    apply plugin: 'nebula.netflixoss'
}

def printAllReleasedArtifacts = project.tasks.create('printAllReleasedArtifacts')
project.snapshot.configure { finalizedBy printAllReleasedArtifacts }
subprojects {
    apply plugin: 'java-library'

    // Apply lombok plugin and disabled the default config file generation.
    apply plugin: "io.freefair.lombok"
    generateLombokConfig.enabled = false
    lombok {
        version = "1.18.20"
    }

    group = 'io.mantisrx'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    if (project.hasProperty('useMavenLocal')) {
        repositories {
            mavenLocal()
        }
    }

    configurations.compileClasspath {
        if (!"mantis-shaded".equals(project.name)) {
            exclude group: 'com.fasterxml.jackson.core'
            exclude group: 'com.fasterxml.jackson.datatype'
            exclude group: 'com.fasterxml.jackson.module'
            exclude group: 'com.fasterxml.jackson.dataformat'
            exclude group: 'com.google.guava', module: 'guava'
            exclude group: 'io.netty', module: 'netty'
            exclude group: 'io.vavr', module: 'vavr-jackson'
            exclude group: 'jline', module: 'jline'
            exclude group: 'org.apache.curator'
            exclude group: 'org.apache.zookeeper'
            exclude group: 'org.apache.jute'
        }
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }

    repositories {
        mavenCentral()
        maven {
            url "https://netflixoss.jfrog.io/artifactory/maven-oss-candidates"
        }
    }

    tasks.withType(Javadoc).all {
        enabled = false
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }

    project.plugins.withType(MavenPublishPlugin) {
        def printReleasedArtifact = project.tasks.create('printReleasedArtifact')
        printReleasedArtifact.doLast {
            def file1 = file("${buildDir}/tmp/publishNebulaPublicationToNetflixOSSRepository/maven-metadata.xml")
            def file2 = file("${buildDir}/tmp/publishNebulaPublicationToNetflixOSSRepository/snapshot-maven-metadata.xml")
            def xmlText = file1.exists() ? file1.text : (file2.exists() ? file2.text : "file not found")
            def xml = new XmlParser(false, false).parseText(xmlText)
            def snapshotVersion = xml.versioning.snapshotVersions.snapshotVersion[0].'value'.text()
            logger.lifecycle("${project.group}:${project.name}:${snapshotVersion}")
            file("${project.rootProject.buildDir}/versions.txt").append("${project.group}:${project.name}:${snapshotVersion}" + '\n')
        }

        printReleasedArtifact.dependsOn(project.rootProject.snapshot)
        printAllReleasedArtifacts.dependsOn("${project.path}:printReleasedArtifact")
    }
}

apply from: file('baseline.gradle')