/*
 * Copyright 2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:9.4.2'
        classpath 'io.mantisrx:mantis-gradle-plugin:1.2.+'
        classpath "io.freefair.gradle:lombok-plugin:5.3.3.3"
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.3.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:4.0.0'
    }
}

ext.versions = [
        flink  : "1.14.2",
        junit4 : "4.11",
        junit5 : "5.4.+",
        mockito: "2.0.+",
        slf4j  : "1.7.0",
        vavr   : "0.9.2",
]

ext.libraries = [
        asyncHttpClient: "org.asynchttpclient:async-http-client:2.12.3",
        commonsLang3   : 'org.apache.commons:commons-lang3:3.5',
        flinkRpcApi    : [
                "org.apache.flink:flink-rpc-core:${versions.flink}",
        ],
        flinkRpcImpl   : [
                "org.apache.flink:flink-rpc-akka:${versions.flink}",
                "org.apache.flink:flink-rpc-akka-loader:${versions.flink}",
        ],
        junit4         : [
                "junit:junit:${versions.junit4}",
                "junit:junit-dep:${versions.junit4}",
        ],
        junitJupiter   : [
                "org.junit.jupiter:junit-jupiter-api:${versions.junit5}",
                "org.junit.jupiter:junit-jupiter-engine:${versions.junit5}",
                "org.junit.jupiter:junit-jupiter-params:${versions.junit5}",
        ],
        mantisShaded   : "io.mantisrx:mantis-shaded:1.3.+",
        mockitoAll     : "org.mockito:mockito-all:${versions.mockito}",
        mockitoCore    : "org.mockito:mockito-core:${versions.mockito}",
        rxJava         : "io.reactivex:rxjava:1.3.8",
        rxNettyShaded  : "com.netflix:mantis-rxnetty:0.4.19.1",
        slf4jApi       : "org.slf4j:slf4j-api:${versions.slf4j}",
        slf4jLog4j12   : "org.slf4j:slf4j-log4j12:${versions.slf4j}",
        spotifyFutures : "com.spotify:completable-futures:0.3.1",
        vavr           : "io.vavr:vavr:${versions.vavr}",
        vavrJackson    : "io.vavr:vavr-jackson:${versions.vavr}",
        vavrTest       : "io.vavr:vavr-test:${versions.vavr}",
]

allprojects {
    apply plugin: 'nebula.netflixoss'
}

subprojects {
    apply plugin: 'java-library'

    // Apply lombok plugin and disabled the default config file generation.
    apply plugin: "io.freefair.lombok"
    generateLombokConfig.enabled = false
    lombok {
        version = "1.18.20"
    }

    group = 'io.mantisrx'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    if (project.hasProperty('useMavenLocal')) {
        repositories {
            mavenLocal()
        }
    }

    configurations.compileClasspath {
        if (!"mantis-shaded".equals(project.name)) {
            exclude group: 'com.fasterxml.jackson.core'
            exclude group: 'com.fasterxml.jackson.datatype'
            exclude group: 'com.fasterxml.jackson.module'
            exclude group: 'com.fasterxml.jackson.dataformat'
            exclude group: 'com.google.guava', module: 'guava'
            exclude group: 'io.netty', module: 'netty'
            exclude group: 'io.vavr', module: 'vavr-jackson'
            exclude group: 'jline', module: 'jline'
            exclude group: 'org.apache.curator'
            exclude group: 'org.apache.zookeeper'
            exclude group: 'org.apache.jute'
        }
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }

    repositories {
        mavenCentral()
        /**
         * This repository locates artifacts that don't exist in maven central but we had to backup from jcenter
         * The exclusiveContent 
         */
        exclusiveContent {
            forRepository {
                maven {
                    url "https://artifactory-oss.prod.netflix.net/artifactory/required-jcenter-modules-backup"
                }
            }
            filter {
                includeGroupByRegex "net\\.andreinc.*"
            }
        }
    }

    tasks.withType(Javadoc).all {
        enabled = false
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}

apply from: file('baseline.gradle')
