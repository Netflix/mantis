name: "Publish snapshot to NetflixOSS and Maven Central"

on: [pull_request_target]

#jobs:
#  approve: # First step
#    runs-on: ubuntu-latest
#    steps:
#      - name: Approve
#        run: echo For security reasons, all pull requests need to be approved first before running any automated CI.
#  build: # Second step
#    runs-on: ubuntu-latest
#    needs: [ approve ] # Require the first step to finish
#    environment:
#      name: Integrate Pull Request # Our protected environment variable
#    steps:
#      - name: Checkout PR
#        uses: actions/checkout@v3
#        with:
#          ref: ${{ github.event.pull_request.head.sha }}
#      - name: Setup jdk
#        uses: actions/setup-java@v2
#        with:
#          java-version: 8
#          distribution: 'zulu'
#      - name: Build
#        uses: gradle/gradle-build-action@v2
#        env:
#          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
#          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
#          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
#          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
#        with:
#          arguments: --info --stacktrace build -x test snapshot
#      - name: Create PR Comment String
#        run: |
#          src=${GITHUB_WORKSPACE}/build/versions.txt
#          dest=${GITHUB_WORKSPACE}/build/versions2.txt
#          echo 'resolutionStrategy {' > $dest
#          awk '{print "    force \"" $0 "\""}' $src >> $dest
#          echo '}' >> $dest
#          echo "PR_STR<<EOF" >> $GITHUB_ENV
#          cat ${dest} >> $GITHUB_ENV
#          echo 'EOF' >> $GITHUB_ENV
#      - name: Upload
#        uses: mshick/add-pr-comment@v2
#        with:
#          message: |
#            ## Uploaded Artifacts
#            To use these artifacts in your Gradle project, paste the following lines in your build.gradle.
#            ```
#            ${{ env.PR_STR }}
#            ```
#          message-id: ${{ github.event.number }} # For sticky messages
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#          allow-repeats: false # This is the default

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - dockerfile: ./mantis-control-plane/Dockerfile
            image: netflixoss/mantiscontrolplaneserver
          - dockerfile: ./mantis-server/mantis-server-worker/Dockerfile
            image: netflixoss/mantisagent
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout PR
        uses: actions/checkout@v3

      - name: Fetch tags
        run: |
          git fetch --prune --unshallow --tags
      - name: Login to Docker Hub
        id: login-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.ORG_NETFLIXOSS_DOCKERHUB_USERNAME }}
          password: ${{ secrets.ORG_NETFLIXOSS_DOCKERHUB_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: ${{ matrix.image }}
          # generate Docker tags based on the following events/attributes
          # we generate the latest tag off the beta branch
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
