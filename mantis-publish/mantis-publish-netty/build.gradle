/*
 * Copyright 2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.github.johnrengelman.shadow'

ext {
    archaiusVersion = 'latest.release'
    spectatorVersion = 'latest.release'
    nettyVersion = '4.1.34.Final'
}

dependencies {
    implementation project(':mantis-publish:mantis-publish-core')
    implementation "io.netty:netty-all:$nettyVersion"

    implementation "com.netflix.spectator:spectator-ext-ipc:$spectatorVersion"
    implementation "com.netflix.archaius:archaius2-core:$archaiusVersion"

    implementation libraries.slf4jApi

    testImplementation libraries.junitJupiter
    testImplementation libraries.mockitoCore3
    testImplementation libraries.slf4jLog4j12
}

test {
    useJUnitPlatform()
}

shadowJar {
    classifier = null
    relocate('com.fasterxml', 'io.mantisrx.shaded.com.fasterxml')
    relocate('io.netty', 'io.mantisrx.shaded.io.netty')
    relocate('META-INF/native/libnetty', 'META-INF/native/libio_mantisrx_shaded_netty')
    relocate('META-INF/native/netty', 'META-INF/native/io_mantisrx_shaded_netty')
    exclude('com.netflix.spectator.*')
    dependencies {
        exclude(dependency('com.netflix.spectator:.*:.*'))
    }
}

jar {
    enabled = false
}
jar.dependsOn(shadowJar)

afterEvaluate {
    publishing {
        publications {
            // to remove shaded dependency from pom.xml
            withType(MavenPublication) {
                pom.withXml {
                    asNode()
                            .dependencies
                            .dependency
                            .findAll {
                                ['jackson-databind',
                                 'jackson-datatype-jdk8',
                                 'netty-all',
                                ].contains(it.artifactId.text())
                            }
                            .each { it.parent().remove(it) }
                }
            }
        }
    }
}
