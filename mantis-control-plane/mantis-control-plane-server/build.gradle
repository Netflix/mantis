/*
 * Copyright 2019 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'org.gradle.test-retry' version '1.0.0'
}

apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'

ext {
    akkaVersion = '2.6.15'
    akkaHttpVersion = '10.2.7'
    fenzoVersion = '0.13.8'
    cliParserVersion = '1.1.1'
    configMagicVersion = '0.11'
    rxJavaReactiveStreamsVersion = '1.+'
    testngVersion = '6.+'
    scalaBinaryVersion = '2.12'
}

dependencies {
    api project(':mantis-control-plane:mantis-control-plane-core')

    api "com.typesafe.akka:akka-http_$scalaBinaryVersion:$akkaHttpVersion"
    api "com.typesafe.akka:akka-http-jackson_$scalaBinaryVersion:$akkaHttpVersion"
    api "com.typesafe.akka:akka-http-caching_$scalaBinaryVersion:$akkaHttpVersion"
    api "com.typesafe.akka:akka-stream_$scalaBinaryVersion:$akkaVersion"
    api "com.typesafe.akka:akka-slf4j_$scalaBinaryVersion:$akkaVersion"
    api "com.typesafe.akka:akka-actor_$scalaBinaryVersion:$akkaVersion"

    api "io.reactivex:rxjava-reactive-streams:$rxJavaReactiveStreamsVersion"
    api "com.netflix.fenzo:fenzo-core:$fenzoVersion"
    api "com.netflix.fenzo:fenzo-triggers:$fenzoVersion"
    api "com.github.spullara.cli-parser:cli-parser:$cliParserVersion"
    api "org.skife.config:config-magic:$configMagicVersion"

    implementation libraries.vavr
    implementation libraries.spotifyFutures

    // todo: separate worker entrypoint and move this to testImplementation instead.
    implementation libraries.spectatorApi

    testImplementation "com.typesafe.akka:akka-testkit_$scalaBinaryVersion:$akkaVersion"
    testImplementation "com.typesafe.akka:akka-http-testkit_$scalaBinaryVersion:$akkaHttpVersion"
    testImplementation libraries.junit4
    testImplementation libraries.mockitoCore3
    testImplementation "org.testng:testng:$testngVersion"
    testImplementation testFixtures(project(":mantis-common"))
    testImplementation testFixtures(project(":mantis-control-plane:mantis-control-plane-core"))
    testImplementation libraries.commonsIo
}
def installDir = file("${buildDir}/install")
def controlPlaneState = file("${project.resources}/docker")
def ci = System.getenv('GITHUB_ACTIONS')
def imageRepository = ci ? 'netflixoss' : 'localhost:5001/netflixoss'
def version = project.version

docker {
    dockerSyncBuildContext {
        from installDir
        from controlPlaneState
        from('docker') {
            into 'docker'
        }
    }

    dockerCreateDockerfile {
        instruction 'RUN apt-get update && apt-get install -y curl'

        // instructions to install all the necessary dependencies
        instruction 'WORKDIR /apps/mantis/mantis-control-plane-server'
        instruction 'COPY mantis-control-plane-server/bin/* bin/'
        instruction 'COPY mantis-control-plane-server/lib/* lib/'
        instruction 'COPY resources/* conf/'
        instruction 'COPY docker/job-clusters/* job-clusters/'
        // todo: remove this once we have a better way to handle uploading job clusters to the control plane
        instruction "RUN for file in job-clusters/*; do sed -i -e \"s/{{version}}/$version/g\" \$file; done"
        instruction 'COPY docker/scripts/* bin/'

        entryPoint './bin/start.sh'
    }

    javaApplication {
        baseImage = 'azul/zulu-openjdk:17-latest'
        maintainer = 'Mantis Developers "mantis-oss-dev@netflix.com"'
        mainClassName = 'io.mantisrx.server.master.MasterMain'
        applicationDefaultJvmArgs = ['--add-opens', 'java.base/java.lang=ALL-UNNAMED', '--add-opens', 'java.base/sun.net.util=ALL-UNNAMED']
        images = ["$imageRepository/mantiscontrolplaneserver:latest"]
        ports = [8100]
    }
}
dockerSyncBuildContext.dependsOn(installDist)

mainClassName = "io.mantisrx.server.master.MasterMain"

run {
    args = ["-p", "master-local.properties"]
}

test {
    maxParallelForks = 1
    retry {
        failOnPassedAfterRetry = false
        maxFailures = 3
        maxRetries = 1
    }
}
